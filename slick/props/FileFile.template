
import com.aslick.strm._
import com.aslick.strm.factory.FrameFactory.{FrameHouse, FrameHouseExecutor}
import com.aslick.strm.DynamicLauncher._
import com.aslick.strm.Model.JValueOps
import com.aslick.strm.BaseCryptoCodec.{protect, unprotect}
import com.aslick.strm.Model.{jsonCompactRender, jsonProtect, jsonUnprotect, xmlProtect, xmlUnprotect}


import java.io.File
import java.nio.file._
import java.nio.charset.{Charset, StandardCharsets}
import java.time.LocalDateTime

import akka.Done
import akka.actor.ActorSystem
import akka.stream.alpakka.slick.javadsl.SlickSession
import akka.stream.alpakka.slick.scaladsl._
import akka.stream.scaladsl._
import akka.stream.IOResult
import akka.util.ByteString
import akka.stream.alpakka.csv.scaladsl.{CsvParsing, CsvToMap, CsvFormatting, CsvQuotingStyle}

import org.slf4j.LoggerFactory


import scala.concurrent.duration._
import scala.concurrent.{Await, ExecutionContext, Future}
import scala.reflect.runtime.universe
import scala.tools.reflect.ToolBox
import scala.util.{Failure, Success}

import slick.collection.heterogeneous.{HCons, HList, HNil}
import slick.jdbc.GetResult
import slick.jdbc.H2Profile.api._


//
//
//
class FileFileExecutor(frameHouse: FrameHouse) extends FrameHouseExecutor(frameHouse) {

  val logger = LoggerFactory.getLogger(getClass)

  //
  val srcFileName = frameHouse.getSourceReader()
  val sinkFileName = frameHouse.getSinkWriter()

  //
  case class SourceFrame(${srcCaseString})

  def mapSourceColumns(m: Map[String, String]): SourceFrame = {
    ${srcMapFieldsStr}
  }

  def mapSinkHeader(h: List[String]): String = {
    ${sinkMapHeaderString}
  }

  def mapSinkColumns(s: SourceFrame): String = {
    ${sinkMapSourceString}
  }


  /**
    * Executes the pipeline
    */
  override def execute(): Unit = {
    //
    println("FileFileExecutor: execute() invoked.")
    println(LocalDateTime.now().toString)

    //
    val done2: Future[IOResult] =
      FileIO.fromPath(Paths.get(srcFileName))
        .via(${srcFlow})
        .map(_.map(_.utf8String))
        .zipWithIndex
        .filter(_._2 == 0)
        .map(t => mapSinkHeader(t._1))
        .map(ByteString(_))
        .runWith(FileIO.toPath(Paths.get(sinkFileName), Set(StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE)))

    //
    done2.failed.foreach(exception => logger.error("failure", exception))
    done2.onComplete(_ => {
      println(LocalDateTime.now().toString)

      //
      val done1: Future[IOResult] =
        FileIO.fromPath(Paths.get(srcFileName))
          .via(${srcFlow})
          .via(CsvToMap.toMapAsStrings(StandardCharsets.UTF_8))
          .map(m => mapSourceColumns(m))
          .map(s => "\n" + mapSinkColumns(s))
          .map(t => ByteString(t))
          .runWith(FileIO.toPath(Paths.get(s"$sinkFileName"), Set(StandardOpenOption.APPEND)))

          done1.failed.foreach(exception => logger.error("failure", exception))
          done1.onComplete(_ => {
            println(LocalDateTime.now().toString)
          })

    })

    //
    terminationWait(10.seconds)
    println(LocalDateTime.now().toString)

    println("FileFileExecutor: execute() completed successfully.")
  }

}
scala.reflect.classTag[FileFileExecutor].runtimeClass
