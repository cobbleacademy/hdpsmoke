1. Scope
   This scope of this document limited to code development standards and practices. This 
   will be used as the base document for several languages.
   
2. Overview
   There are lot of advantages of following coding standards in any software development.
It will contain fewer bugs and will run more efficiently than poorly written programs. 
As part of SDLC process the final product will be running in production environment undergoes
through regular maintenance activities. The standards will help program coders to understand, 
maintain and modify the software as needed. These standards will help in increased productivity 
of the product and support. This will reduce the software cost effectively. 

3. Coding Practices
   1. Documentation Formats:
   This will improve the document readability and helps to identify certain characteristics
of software.
	This can include:
	The header or banner with certain style
	The name of author
	The date which is created and modified
	The description with the intent of program
	
	The document details vary for file, module, methods, blocks
	
	File: The purpose of the file to be created
	Method: The purpose of the method what it does
	Method: input parameters it receives
	Method: output parameter it returns
	Method: Exception Codes
	

   2. Indentation:
      Indentation will help to read and manage and understand programs easily
      
      A 2 or 4 tab spaces are recommended.
      Allows to identify where scope and sub statements begin and end with
      Method beginning and completion statements
      
      while(exist) {
        i = i + 1;
        if (i % 2 == 0) println("even number")
      }
      
      
   3. Inline Comments:
   
   4. Structured:
      Using several modules, interfaces and implementations based on the objective.
      There should not be mix of different objectives in single class or interface.
      
   5. Interfaces, Classes, Methods:
   
      An interface is an abstract type that is used to specify a common behavior that a 
      class must implement. Interfaces will help to be called by other module objects without
      knowing the implementation.
      
      public interface OperateCar {
        int changeLanes(Direction direction, double startSpeed, double endSpeed);
      }
      
      A class comprised with attributes and methods. A template for objects.
      Interface/Classes promotes the separation of concerns. A class with several features
      can be represented by different interfaces where the class implements its feature.
      
      public class Bicycle {
        //
        public int gear;
        
        public void setGear(int newValue) {
          gear = newValue;
        }
        
      }
      
      A method will be crated to perform particular action or which can be called several
      times to perform an action
      
        public void applyBrake(int decrement) {
          speed -= decrement;
        }

        public void speedUp(int increment) {
          speed += increment;
        }
   
   6. Source File Names:
   
    The name of the source file or script shall represent its function. All of the routines 
    in a file shall have a common purpose.
    
    Starts with the uppercase letter.
    Uses a noun such as Employee, Color, Dependent, Rectangle, Approvable, ActionListener etc
    Use appropriate words, instead of acronyms.
   
   7. Variable Names:  
   
      Start with a lowercase letter such as id, age, firstName
      Should not start with with special characters like & (ampersand), $ (dollar), _ (underscore).
      Multiple words separated by upper case first letter such as firstName, lastName.
      Create meaningful variable instead of i, j, k
      
      int id;
      int age;
      String firstName;
   
   8. Constants:
   
   Should be defined with all upper case letters like START, END, UP, DOWN
   Name with multiple words separated by an underscore '_' such as SLOW_RATE, RANDOM_NUMBER
   Name can contain numeric numbers but not as the first letter ADDR_1, ADDR_2, ADDR_3
   
   static final int MIN_SPEED = 40; 
   
   8. Braces:
   
   9. Line Length:
   
   10. Spacing:
   
   11. Line Wrap:
   
   12. Multiple Variables:
   
   13. Statements:
   
   14. Parenthesis:
   
   15. Error Messages:
   
   16. Size:
   
   
   
   
   
   
   
   
   
   
   
   
   