Persistent Volume Provisions:
-------------------------------
	statically:
		use static disk that's created outside of AKS
			static PV by creating one or more Azure managed disks

	dynamically:
		create the disk storage dynamically
			dynamically creating one or more Azure managed disks



	default: cost-effective Standard SSD storage
	managed-csi: Standard SSD locally redundant storage (LRS)
	managed-csi-premium: SSD-based high-performance, low-latency disk



Statically provision a volume
-------------------------------
	Azure disk for use with AKS, you can create the disk resource in the node resource group
	Azure disk from separate resource group requires a grant for AKS Contributor to disk Resource Group


Dynamically provision a volume
-------------------------------
	Built-in storage classes
	A persistent volume claim (PVC) uses the storage class object to dynamically provision an Azure Disk storage container.

	
	
	


Questions to clarify:
reclaimPolicy: controls the behavior of the underlying Azure storage resource when the pod is deleted
	retain or delete




Backup and Snapshot:
--------------------
	Backup: 
	-------
    	Back up your data using an appropriate tool for your storage type, such as Velero or Azure Backup.
	
		Azure Disks can use built-in snapshot technologies.
			https://learn.microsoft.com/en-us/azure/virtual-machines/snapshot-copy-managed-disk?tabs=cli
			(az snapshot create -g myResourceGroup --source "$osDiskId" --name osDisk-backup)
		Velero can back up persistent volumes along with additional cluster resources and configurations
			https://github.com/vmware-tanzu/velero

	Volume Snapshot:
	----------------
		The Azure Disk CSI driver supports creating snapshots of persistent volumes
			Full or Incremental
			
			---
			apiVersion: snapshot.storage.k8s.io/v1
			kind: VolumeSnapshotClass
			metadata:
  				name: csi-azuredisk-vsc
			driver: disk.csi.azure.com
			deletionPolicy: Delete
			parameters:
  				incremental: "true"  # available values: "true", "false" ("true" by default for Azure Public Cloud, and "false" by default for Azure Stack Cloud)






-- SQLLite Database
-- https://www.mycompiler.io/view/7PJVIfVQEar
-- https://www.mycompiler.io/new/sql?fork=K5ZpjYOy8ji
-- https://www.mycompiler.io/view/HXdZJKhJvZh
-- create a table
-- create a table
CREATE TABLE temperature (
  DEVICE_ID INTEGER NOT NULL,
  CAPTURE_DATE DATE NOT NULL,
  TEMPU INTEGER NOT NULL
);
-- insert some values
INSERT INTO temperature VALUES (1, '2024-01-01', 20);
INSERT INTO temperature VALUES (1, '2024-01-02', 30);
INSERT INTO temperature VALUES (1, '2024-01-03', 22);
INSERT INTO temperature VALUES (1, '2024-01-04', 25);
INSERT INTO temperature VALUES (1, '2024-01-05', 25);
INSERT INTO temperature VALUES (1, '2024-01-06', 32);
INSERT INTO temperature VALUES (2, '2024-02-01', 42);
INSERT INTO temperature VALUES (2, '2024-02-02', 24);
INSERT INTO temperature VALUES (2, '2024-02-03', 33);
INSERT INTO temperature VALUES (3, '2024-01-02', 30);
-- fetch some values
WITH temp_variance
AS
(
    SELECT 
        a.DEVICE_ID, a.CAPTURE_DATE next, b.prev, a.TEMPU, b.TEMPU, CASE WHEN b.TEMPU IS NOT NULL THEN CASE WHEN a.TEMPU > b.TEMPU THEN 'Warmer' WHEN a.TEMPU < b.TEMPU THEN 'Cooler' ELSE 'No Change' END ELSE 'NONE' END from_yesterday_factor
    FROM 
    temperature a 
    LEFT OUTER JOIN 
    (select DEVICE_ID, date(CAPTURE_DATE,'+1 day') next, CAPTURE_DATE prev, TEMPU FROM temperature) b 
    ON (a.DEVICE_ID=b.DEVICE_ID AND a.CAPTURE_DATE = b.next)
)
select * from temp_variance;

SELECT
    DEVICE_ID,
    CAPTURE_DATE,
    TEMPU,
    PREV_TEMPU,
    CASE 
        WHEN PREV_TEMPU IS NOT NULL THEN 
            CASE 
                WHEN TEMPU > PREV_TEMPU THEN 'Warmer' 
                WHEN TEMPU < PREV_TEMPU THEN 'Cooler' 
            	ELSE 'No Change' 
            END 
    	ELSE 'NONE' 
    END from_yesterday_factor
FROM (
SELECT
    DEVICE_ID,
    CAPTURE_DATE,
    TEMPU,
    LAG(TEMPU, 1, 0) OVER(PARTITION BY DEVICE_ID ORDER BY CAPTURE_DATE) PREV_TEMPU
from temperature
) a
;
